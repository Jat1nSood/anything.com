"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.of = exports.isDatestringInFormatISOWithoutTime = exports.isDatestringInFormatISOWithoutMilliseconds = exports.isDatestringInFormatISO = void 0;
const date_descriptor_1 = require("./date-descriptor");
function isDatestringInFormatISO(datestring) {
    return /^[-+]?(?:\d{2})?\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/.test(datestring);
}
exports.isDatestringInFormatISO = isDatestringInFormatISO;
function isDatestringInFormatISOWithoutMilliseconds(datestring) {
    return /^[-+]?(?:\d{2})?\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$/.test(datestring);
}
exports.isDatestringInFormatISOWithoutMilliseconds = isDatestringInFormatISOWithoutMilliseconds;
function isDatestringInFormatISOWithoutTime(datestring) {
    return /^[-+]?(?:\d{2})?\d{4}-\d{2}-\d{2}$/.test(datestring);
}
exports.isDatestringInFormatISOWithoutTime = isDatestringInFormatISOWithoutTime;
function of(value) {
    if (typeof value === 'number') {
        return new Date(value);
    }
    if (typeof value === 'string') {
        switch (true) {
            case isDatestringInFormatISO(value):
            case isDatestringInFormatISOWithoutMilliseconds(value):
            case isDatestringInFormatISOWithoutTime(value):
                return (0, date_descriptor_1.dateStringAsDate)(value);
            default:
                throw new Error(`Expected date-string to be in ISO time, got '${value}'`);
        }
    }
    if ((0, date_descriptor_1.isDateDescriptor)(value)) {
        return (0, date_descriptor_1.dateDescriptorAsDate)(value);
    }
    throw new Error(`Expected argument to be of type number or string or DateDescriptor, got '${value}'`);
}
exports.of = of;
//# sourceMappingURL=of.js.map