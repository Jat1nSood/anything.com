export type Arity1<A, B> = (a: A) => B;
export type Arity2<A, B, C> = (a: A, b: B) => C;
export type Arity3<A, B, C, D> = (a: A, b: B, c: C) => D;
export interface Curry1<A, B> {
    (): Curry1<A, B>;
    (a: A): B;
}
export interface Curry2<A, B, C> {
    (): Curry2<A, B, C>;
    (a: A): Curry1<B, C>;
    (a: A, b: B): C;
}
export interface Curry3<A, B, C, D> {
    (): Curry3<A, B, C, D>;
    (a: A): Curry2<B, C, D>;
    (a: A, b: B): Curry1<C, D>;
    (a: A, b: B, c: C): D;
}
export declare function curry<A, B>(fn: Arity1<A, B>): Curry1<A, B>;
export declare function curry(fn: Arity1<any, any>): Curry1<any, any>;
export declare function curry<A, B, C>(fn: Arity2<A, B, C>): Curry2<A, B, C>;
export declare function curry(fn: Arity2<any, any, any>): Curry2<any, any, any>;
export declare function curry<A, B, C, D>(fn: Arity3<A, B, C, D>): Curry3<A, B, C, D>;
export declare function curry(fn: Arity3<any, any, any, any>): Curry3<any, any, any, any>;
//# sourceMappingURL=curry.d.ts.map