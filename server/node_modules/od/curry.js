"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.curry = void 0;
function curry1(fn) {
    function curried(a) {
        switch (arguments.length) {
            case 0:
                return curried;
            default:
                return fn(a);
        }
    }
    return curried;
}
function curry2(fn) {
    function curried(a, b) {
        switch (arguments.length) {
            case 0:
                return curried;
            case 1:
                return curry1((b) => fn(a, b));
            default:
                return fn(a, b);
        }
    }
    return curried;
}
function curry3(fn) {
    function curried(a, b, c) {
        switch (arguments.length) {
            case 0:
                return curried;
            case 1:
                return curry2((b, c) => fn(a, b, c));
            case 2:
                return curry1((c) => fn(a, b, c));
            default:
                return fn(a, b, c);
        }
    }
    return curried;
}
function curry(fn) {
    switch (fn.length) {
        case 0:
            return fn;
        case 1:
            return curry1(fn);
        case 2:
            return curry2(fn);
        case 3:
            return curry3(fn);
        default:
            throw new Error('This `curry` implementation does not support more than 3 arguments');
    }
}
exports.curry = curry;
//# sourceMappingURL=curry.js.map