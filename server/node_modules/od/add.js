"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.add = void 0;
const curry_1 = require("./curry");
const parse_1 = require("./parse");
const unit_of_time_1 = require("./unit-of-time");
function numberOfDaysInMonth(date) {
    const daysInMonth = new Date(date.getUTCFullYear(), date.getUTCMonth() + 1, 0).getUTCDate();
    if (Number.isNaN(daysInMonth)) {
        return 31;
    }
    return daysInMonth;
}
function _addMonth(amount, date) {
    let clone = new Date(date.getTime());
    clone.setUTCDate(1);
    if (Number.isNaN(clone.getTime()) && 0 < amount) {
        clone = new Date(date.getTime());
        clone.setUTCDate(28);
        clone.setUTCMonth(clone.getUTCMonth() + 1);
        clone.setUTCDate(1);
        amount -= 1;
    }
    clone.setUTCMonth(clone.getUTCMonth() + amount);
    clone.setUTCDate(Math.min(numberOfDaysInMonth(clone), date.getUTCDate()));
    return clone;
}
function _addYear(amount, date) {
    const clone = new Date(date.getTime());
    clone.setUTCDate(1);
    clone.setUTCFullYear(date.getUTCFullYear() + amount);
    clone.setUTCDate(Math.min(numberOfDaysInMonth(clone), date.getUTCDate()));
    return clone;
}
exports.add = (0, curry_1.curry)(function add(unit, amount, date) {
    (0, parse_1.parseNumber)(amount);
    (0, parse_1.parseDate)(date);
    switch (unit) {
        case 'month':
            return _addMonth(amount, date);
        case 'year':
            return _addYear(amount, date);
        case 'millisecond':
        case 'second':
        case 'minute':
        case 'hour':
        case 'day':
        case 'week':
            return new Date(unit_of_time_1.millisecondsPer[unit] * amount + date.getTime());
        default:
            throw new Error(`Expected argument 'unit' to be of type '${unit_of_time_1.unitsOfTime.join(' | ')}'`);
    }
});
//# sourceMappingURL=add.js.map